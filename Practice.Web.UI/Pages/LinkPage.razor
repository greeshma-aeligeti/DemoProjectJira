@page "/LinkTask/{fromId}"
@using System.Diagnostics

@inject RelationAPIService relationService
@inject TaskAPIService TaskService
@using Microsoft.EntityFrameworkCore.Metadata.Internal

<Alert @ref="alert" Color="Color.Success">Task Linked Successfully   <CloseButton /></Alert>
<Alert @ref="failAlert" Color="Color.Danger">Link already exists  <CloseButton /> </Alert>
<Alert @ref="addTask" Color="Color.Danger">Select Task <i class="bi bi-exclamation-triangle"></i>    <CloseButton /> </Alert>

<EditForm Model="relation" OnValidSubmit="HandleValidSubmit" >
    <Forms.DataAnnotationsValidator/>

    <div class="px-2 container">
        <h3>Add Link [@fromId]</h3>

        <div class="row">
           
            <label for="rel" class="fw-bold">Relation</label>
            <InputSelect id="relationshipType" @bind-Value="selectedRelationshipType" class="form-control">
                <option hidden value="">Select Relationship Type</option>
                @foreach (var type in Enum.GetValues(typeof(TaskRelationshipType)).Cast<TaskRelationshipType>())
                {
                    <option value="@type">@type.ToString()</option>
                }
            </InputSelect>
        </div>

        <div class="d-flex flex-row row">
            <div class="col-6">
                <label for="t2" class="fw-bold">Task1</label>
                <InputSelect class="form-control" id="t2" @bind-Value="relation.ParentTaskId">
                    @foreach (var t in tasks)
                    {
                        if (t.Id == fromId)
                        {
                            <option value="@t.Id">@t.Title (@t.Id)</option>
                        }
                        
                    }

                </InputSelect>
            </div>
        <div class="col-6">
            <label for="t2" class="fw-bold">Task2</label>
            <InputSelect class="form-control" id="t2" @bind-Value="selectedTaskId">
                <option hidden>Select Task</option>
                @foreach (var t in tasks)
                {
                    if (t.Id == fromId)
                    {
                        continue;
                    }
                    <option value="@t.Id">@t.Title (@t.Id)</option>
                }

            </InputSelect>
            </div>
    </div>

        
    <button type="submit" class=" m-3 btn btn-primary">Create Link</button>


    </div>
</EditForm>

<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>From Task</TableHeaderCell>
            <TableHeaderCell>To Task</TableHeaderCell>
            <TableHeaderCell>Relation Type</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach(var rel in relationsByTid)
        {
        <TableRow>
           <TableRowCell>
               @rel.ParentTaskId
           </TableRowCell>
           <TableRowCell>@rel.ChildTaskId</TableRowCell>
           <TableRowCell>@rel.RelationshipType.ToString()</TableRowCell>
           </TableRow>
        }
        
    </TableBody>
</Table>

@code {

    [Parameter]
    public string fromId { get; set; }

    public TaskDTO FromTask = new TaskDTO();
    public List<TaskDTO> tasks = new List<TaskDTO>();
    public string? selectedTaskId;
    private TaskRelationshipDTO relation = new TaskRelationshipDTO();
    private List<RelationDTO> AllRelations = new List<RelationDTO>();
    private IEnumerable<TaskRelationshipDTO> relationsByTid = new List<TaskRelationshipDTO>();
    private TaskRelationshipType? selectedRelationshipType;
    private static int count = 2;
    Alert alert;
    Alert failAlert;
    Alert addTask;

    protected override async void OnInitialized()
    {
        var relById = await relationService.GetAllRelationsByTid(fromId);
        relationsByTid = relById.ToList();
        FromTask = await TaskService.GetTaskByID(fromId);
        var taskList = await TaskService.GetTasksAsync();
        tasks = taskList.ToList();
        relation.ParentTaskId = fromId;
        relation.ChildTaskId = "";
        // base.OnInitialized();
    }

    private async Task HandleValidSubmit()
    {
        // relation.Id = count;
        var rel = new TaskRelationshipDTO
            {
                ParentTaskId = fromId,
                ChildTaskId = selectedTaskId,
                RelationshipType = selectedRelationshipType.Value
            };
        relation = rel;
        try
        {
            var res = await relationService.CreateRelationAsync(relation);
            count = count + 1;
            selectedRelationshipType = null;
            selectedTaskId = null;
            StateHasChanged();
            if (res != null)
            {
                Reload();
                alert.Show();

            }
            else
            {
                failAlert.Show();
            }

        }
        catch(Exception ex)
        {
            Reload();
            failAlert.Show();
        }

        // relation.relation = "";

    }


    private async Task Reload()
    {
        relationsByTid =await relationService.GetAllRelationsByTid(fromId);
        StateHasChanged();

    }

}
