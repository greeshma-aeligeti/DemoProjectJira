@page "/CreateTask"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.AspNetCore.Components.Forms
@inject TaskAPIService TaskService
@inject UserAPIService UserService
@inject NavigationManager Navigation


<EditForm Model="task" OnValidSubmit="HandleValidSubmit">

    <Alert @ref="created" Color="Color.Success">Task Created Succesfully  <CloseButton /></Alert>
    <Alert @ref="Failed" Color="Color.Danger">Task Creation Failed <CloseButton /></Alert>

       <DataAnnotationsValidator />

 
    <div class="p-3 container">
<div class="d-flex flex-row p-3 row">
            
            <div class=" col-12">

            <label for="title" class="fw-bold">Title</label>
            <InputText id="title" @bind-Value="task.Title" class="form-control" />
            <ValidationMessage For="@(()=>task.Title)"/>
        </div>
        <div class="col-12"></div>
      <br/>
       
        <div class=" col-12">
      
            <label for="description" class="fw-bold">Description</label>
        <InputTextArea id="description" @bind-Value="task.Description" class="form-control" />
      </div>
            <div class="col-12"></div>

    <br/>

        <div class=" col-6 ">

            <label for=" user" class="fw-bold">Reporter User</label>

                <AutoComplete1 TItem="UserDTO" Items="@users" DisplayPropertyName="UserName" Placeholder="Select Reporter" IdPropertyName="UserId" ValueChanged="@(value => task.ReporterId = (int)value)" />

     
        </div>
            <div class=" col-6 ">

                <label for=" user" class="fw-bold">Assign User</label>


                <AutoComplete1 TItem="UserDTO" Items="@users" DisplayPropertyName="UserName" Placeholder="Select Assignee" IdPropertyName="UserId" ValueChanged="@(value => task.AssigneeId = (int)value)" />


            </div>
        </div>

        <div class=" d-flex flex-row p-3 mb-2 row">

 

            <div class="col-4">
                <label class="fw-bold" for="Type" >Type</label>
                <br/>
               



                <InputSelect class="form-control" id="Type" @bind-Value="task.Type">
                    <option hidden value="">Select type</option>
                    @foreach (var type in Enum.GetValues(typeof(TaskType)).Cast<TaskType>())
                    {
                        <option value="@type">@type.ToString()</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>task.Type)" />


            </div>
            <div class=" col-4">
                <label class="fw-bold" for="priority">Priority</label>
                <br />




                <InputSelect class="form-control" id="priority" @bind-Value="task.Priority"  >
                    <option hidden value="null">Choose Priority</option>
                    @foreach (var priority in Enum.GetValues(typeof(PriorityLevel)).Cast<PriorityLevel>())
                    {
                        <option value="@priority">@priority.ToString()</option>
                    }
                </InputSelect>




                <ValidationMessage For="@(()=>task.Priority)" />

   </div>
            <div class="col-4 ">
                <label for="status" class="fw-bold">Status</label>

                <InputSelect id="status" class="form-control" @bind-Value="taskStatusValue" @onchange="()=>HandleStatusChange()">
                    
                    <option hidden value="">Select Status</option>

                    @if (task.Type == TaskType.Task)
                    {
                        bool isFirst = true;
                        foreach (var status in Enum.GetValues(typeof(MyTaskStatus)).Cast<MyTaskStatus>())
                        {
                            <option value="@status" disabled="@(!isFirst)">
                                @status.ToString()
                            </option>
                            isFirst = false;
                        }
                    }
                    else if (task.Type == TaskType.Bug)
                    {
                        bool isFirst = true;

                        @foreach (var status in Enum.GetValues(typeof(BugStatus)).Cast<BugStatus>())
                        {
                            <option value="@status" disabled="@(!isFirst)">@status.ToString()</option>
                            isFirst = false;
                        }
                    }
                </InputSelect>





            
                


            </div>
   </div>
   <div class=" d-flex flex-row row m-2">
            <div class="col-4 ">
            <label for="startDate" class="fw-bold">Start Date</label>
        <InputDate id="startDate" @bind-Value="task.StartDate" class="form-control" />
                <ValidationMessage For="@(()=>task.StartDate)" />

    </div>




            <div class="col-4 ">
            <label for="endDate" class="fw-bold">End Date</label>
        <InputDate id="endDate" @bind-Value="task.EndDate" class="form-control" />
                <ValidationMessage For="@(()=>task.EndDate)" />

    </div>

            <div class="col-4">
                <label for="storypoint" class="fw-bold">Story Point</label>
                <InputSelect id="storypoint" @bind-Value="task.StoryPoint" class="form-control">
                    @foreach (var number in fibonacciNumbers)
                    {
                        <option value="@number">@number</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>task.StoryPoint)"/>
            </div>
        </div>


        <div class="m-3 " >


            <label for=" project" class="fw-bold">Project/Area</label>


         @*    <AutoComplete1 TItem="ProjectDTO" Items="@proj" DisplayPropertyName="Name" Placeholder="Select project..." IdPropertyName="Id" ValueChanged="@(value => task.ProjectId = (int)value)" />

 *@


            <InputSelect id="project"  @bind-Value="task.ProjectId" class="form-control" @onselect="FilterItr">
                <option hidden value=0> Select project
                </option>
                @foreach(ProjectDTO p in proj)
                {
                    <option value="@p.Id">@p.Name</option>
                }
              

                
                
        </InputSelect>
            <ValidationMessage For="@(() => task.ProjectId)" />
    </div>

        <div class="m-3 " >
            <label for=" iteration" class="fw-bold">Iterations</label>
            
       
@*             <AutoComplete1 TItem="IterationDTO" Items="@filtItrs" DisplayPropertyName="Name" Placeholder="Select iteration..." IdPropertyName="Id" ValueChanged="@(value => task.IterationId = (int)value)" />
 *@
        <InputSelect id="iteration" @bind-Value="task.IterationId"  class="form-control">
            <option hidden value=0>Select iteration</option>
                @foreach(IterationDTO i in Itrs)
                {
                    if (i.projID == task.ProjectId)
                    {
                        <option value="@i.Id"
                        >@i.Name
                        </option>
                       
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=>task.IterationId)"/>
    </div>


      



    <div class="m-3 row">
        
    <button type="submit" class="btn btn-primary col-3">Create Task</button></div>
    <div class="align-items-center">
    
  
    </div>
    </div>
</EditForm>



@code {
    private TaskDTO task=new TaskDTO();
    private List<ProjectDTO> proj=new List<ProjectDTO>();
    private List<IterationDTO> Itrs = new List<IterationDTO>();
    private List<IterationDTO> filtItrs = new List<IterationDTO>();

    private string taskStatusValue;
    private string ItName="";
    private List<UserDTO> users = new List<UserDTO>();
    private bool flag = false;
    private EditContext editContext;
    private Alert created;
  private   Alert Failed;
    private List<int> fibonacciNumbers = new List<int> { 1, 2, 3, 5, 8, 13, 21 };


    protected override async void OnInitialized()
    {

        Console.WriteLine("Create task initialized");
        task.StartDate = DateTime.Now;
        task.EndDate = DateTime.Now;

        var proj1 = await TaskService.GetAllProjectsAsync();
        proj = proj1.ToList();

        var itr1 = await TaskService.GetAllIterations();
        Itrs = itr1.ToList();

        var users1 = await UserService.GetAllUsersAsync();
        users = users1.ToList();
        Console.WriteLine("Users count" + users.Count);
       
        Console.WriteLine(proj);


    }
    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        editContext.NotifyFieldChanged(e.FieldIdentifier);
    }

    private void HandleStatusChange()
    {
        if (task.Type == TaskType.Task)
        {
            if (Enum.TryParse<MyTaskStatus>(taskStatusValue, out MyTaskStatus parsedStatus))
            {
                task.TaskStatus =parsedStatus;
                StateHasChanged();
            }
            //task.TaskStatus = taskStatusValue;
        }
        else if (task.Type == TaskType.Bug)
        {
            if (Enum.TryParse<BugStatus>(taskStatusValue, out BugStatus parsedStatus))
            {
                task.BugStatus = parsedStatus;
                StateHasChanged();
            }
            // task.BugStatus = taskStatusValue;
        }

    }


    private async Task HandleValidSubmit()
    {
        //  task.UserId = (int)defUser;
        task.Id = "";
        if (task.Type == TaskType.Task)
        {
            if (Enum.TryParse<MyTaskStatus>(taskStatusValue, out MyTaskStatus parsedStatus))
            {
                task.TaskStatus = parsedStatus;
                StateHasChanged();
            }
            //task.TaskStatus = taskStatusValue;
        }
        else if (task.Type == TaskType.Bug)
        {
            if (Enum.TryParse<BugStatus>(taskStatusValue, out BugStatus parsedStatus))
            {
                task.BugStatus = parsedStatus;
                StateHasChanged();
            }
            // task.BugStatus = taskStatusValue;
        }

        try
        {
            var res = await TaskService.CreateTaskAsync(task);
            flag = true;
            await created.Show();
            StateHasChanged();
            task.Title = "";
            task.Description = "";
            task.StartDate = DateTime.Now;
            task.EndDate = DateTime.Now;
            //   task.StatusId="";
            //task.Priority =null;
            Navigation.NavigateTo("/");
            await Task.Delay(3000);

            flag = false;
        }
        catch(Exception e)
        {
           await  Failed.Show();

        }

       // ToastService.ShowSuccess("Task Created Successfully");

        //task.StartDate = curDate;
        // Navigation.NavigateTo("/tasks");
    }
    private async Task FilterItr()
    {
        foreach(var i in Itrs)
        {
            if (i.projID == task.ProjectId)
            {
                filtItrs.Add(i);
            }
        }
    }




}
