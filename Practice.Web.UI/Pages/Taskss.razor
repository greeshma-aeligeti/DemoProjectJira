
@page "/"
@using System.Diagnostics
@inject TaskAPIService taskService
@inject UserAPIService userService
@inject NavigationManager Navigation


<h3>List of Tasks</h3>


@if (tasks == null)
{
    <p><em>.............Loading...</em></p>
}
else{
   @*  <ul>
       
        @foreach (var task in tasks)
        {
            <h1>@task.Id</h1>
            <li>@task.Title</li>
            <li>@task.CurStatus</li>
            <li>@task.Description</li>


        }
    </ul> *@
    <style>
         TableRow {
            padding: 10px;
        }

        .table-wrapper {
            max-height:300px;
            overflow-x:hidden;
            margin: 20px;
        }

        .filter-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .filter-section input {
                flex: 4;
                padding: 0.5rem;
                border-radius: 4px;
                border: 1px solid #ced4da;
            }

           @*  .filter-section InputSelect {
                flex: 2;
                padding: 0.5rem;
                border-radius: 4px;
                border: 1px solid #ced4da;
                white-space: nowrap;
            } *@

            .filter-section .btn {
                white-space: nowrap;
            }

    </style>

    <div class="filter-section">
        <button class="btn btn-primary" @onclick="()=>CreateNavigate()">Create</button>
        <input type="text" placeholder="Search by name"  @bind="nameFilter" />
        <InputSelect class="form-control" @onselectionchange="()=>ApplyFiltersAndSort()" @bind-Value="selectedSortOption">
            <option hidden value="">Sort by</option>

            <option value="Name">Name</option>
            <option value="Type">Type</option>
            <option value="Status">Status</option>
            <!-- Add more options as needed -->
        </InputSelect>
        <button class="btn btn-outline-dark" @onclick="()=>ApplyFiltersAndSort()">Apply</button>
    </div>
  



 

    <Alert @ref="alert" Color="Color.Success" >Task Deleted Successfully   <CloseButton/></Alert>
    <Alert @ref="failAlert" Color="Color.Danger">Deletion failed</Alert>
   
        <div style="overflow-x: auto; " class=" table-wrapper">
    <Table class="table table-striped-columns" style="min-width:max-content">
        <TableHeader >
            <TableRow>
                <TableHeaderCell>Id</TableHeaderCell>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Type</TableHeaderCell>
                <TableHeaderCell>Description</TableHeaderCell>
                <TableHeaderCell>Reporter</TableHeaderCell>

                <TableHeaderCell>Assignee</TableHeaderCell>
                <TableHeaderCell> Status</TableHeaderCell>
                <TableHeaderCell> Story Points</TableHeaderCell>

                <TableHeaderCell>Priority</TableHeaderCell>
                <TableHeaderCell>Project</TableHeaderCell>
                <TableHeaderCell>Iteration</TableHeaderCell>
                <TableHeaderCell>Actions</TableHeaderCell>

            </TableRow>
        </TableHeader>
        <TableBody>
                @foreach (var task in filteredTasks)
            {
                <TableRow class="p-2">
                    <TableRowCell>@task.HexaId</TableRowCell>
                     <TableRowCell>@task.Title</TableRowCell>
                     <TableRowCell>@task.Type</TableRowCell>
                     <TableRowCell>@task.Description</TableRowCell>

                    @foreach(var u in users)
                    {
                        if (task.ReporterId == u.UserId)
                        {
                            <TableRowCell>@u.UserName</TableRowCell>
                        }
                    }

                    @foreach (var u in users)
                    {
                        if (task.AssigneeId == u.UserId)
                        {
                            <TableRowCell>@u.UserName</TableRowCell>
                        }
                    }
                  
                    @if (task.Type.ToString() == "Task")
                    {
                        <TableRowCell>@task.TaskStatus</TableRowCell>
                    }
                    @if (task.Type.ToString() == "Bug")
                    {
                        <TableRowCell>@task.BugStatus</TableRowCell>
                    }
                    <TableRowCell>@task.StoryPoint</TableRowCell>


                        <TableRowCell>@task.Priority</TableRowCell>
                    @* <td>@task.ProjectId</td>*@
                    @foreach(var p in proj)
                    {
                        if (p.Id == task.ProjectId)
                        {
                            <TableRowCell>@p.Name</TableRowCell>
                        }
                    }
                    @foreach(var i in itrs)
                    {
                        if(i.Id==task.IterationId && i.projID == task.ProjectId)
                        {
                            <TableRowCell>@i.Name</TableRowCell>
                        }
                    }

                    <TableRowCell >

                      <a  @onclick="()=>DeleteTask(task.Id)"><i class="bi bi-trash"></i></a>
                        <a  @onclick="()=>UpdateTask(task.Id)"><i class="bi p-2 bi-pencil"></i></a>
                        <a @onclick="()=>LinkTask(task.Id)"><i class=" bi bi-link"></i></a>
                        <a @onclick="()=>Attach(task.Id)"><i class=" bi bi-upload"></i></a>

                  </TableRowCell>
                    

                </TableRow>
            }
        </TableBody>
    </Table>

    </div>
    

  
    

    @code {
    private IEnumerable<TaskDTO> tasks;
    private ProjectDTO[] proj;
    private UserDTO[] users;
    /// <summary>
    ///private AlertMessage Alert;
    /// </summary>
    // public List<TaskDTO> GridData { get; set; }
    private IterationDTO[] itrs;
    Alert alert;
    Alert failAlert;

    private string nameFilter = string.Empty;
    private List<TaskDTO> filteredTasks ;
    private string selectedSortOption = "Name";


    private async Task DeleteTask(int id)
    {

        var res=  await taskService.DeleteTaskApi(id);
        if (res)
        {
            alert.Show();
            await Reload();

        }
        else
        {
            failAlert.Show();
            await Reload();
        }


    }

    private async Task UpdateTask(int id)
    {
        Navigation.NavigateTo($"/updatetask/{id}");

    }
    private async Task LinkTask(int id)
    {
        Navigation.NavigateTo($"/LinkTask/{id}");
    }
    private async Task Attach(int id)
    {
        Navigation.NavigateTo($"/upload/{id}");
    }

    private async Task CreateNavigate()
    {
        Navigation.NavigateTo("/CreateTask");
    }
    private async Task Reload()
    {
        tasks = await taskService.GetTasksAsync();
        StateHasChanged();

    }

    private async Task ApplyFiltersAndSort()
    {
        filteredTasks = tasks.ToList() ?? new List<TaskDTO>();

        // Apply filters
        if (!string.IsNullOrWhiteSpace(nameFilter))
        {
            filteredTasks = filteredTasks.Where(t => t.Title.Contains(nameFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Apply sorting
        switch (selectedSortOption)
        {
            case "Name":
                filteredTasks = filteredTasks.OrderBy(t => t.Title).ToList();
                break;
            case "Type":
                filteredTasks = filteredTasks.OrderBy(t => t.Type).ToList();
                break;
            case "Status":
                filteredTasks = filteredTasks.OrderBy(t => t.TaskStatus).ToList();
                break;
                // Add more cases as needed
        }
    }



    protected override async Task OnInitializedAsync()
    {

        try
        {
            if(taskService==null){
                Console.WriteLine("Tasks service is null");
                return;
            }
            var tasksList = (await taskService.GetTasksAsync());

            Console.WriteLine(tasksList);
            if(tasksList!=null){
                tasks = tasksList.ToList();
                proj = (await taskService.GetAllProjectsAsync()).ToArray();
                itrs = (await taskService.GetAllIterations()).ToArray();
                users = (await userService.GetAllUsersAsync()).ToArray();
               await ApplyFiltersAndSort();

            }
            else{
                Console.WriteLine("Tasks service returned null");

            }
        }
        catch(Exception ex){
            Console.WriteLine(ex.Message);
            throw;
        }

        //GridData = tasks;
    }
}
}
