
@page "/"
@using System.Diagnostics
@inject TaskAPIService taskService
@inject UserAPIService userService
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Components
@using Blazorise.LoadingIndicator
@using Blazorise.Animate
@using Blazorise.SpinKit
<script>
    window.fadeOut = (taskId) => {
    var element = document.querySelector(`.task-item[data-id='${taskId}']`);
    if (element) {
        element.classList.add('fade-out');
    }
};

</script>

<div class="overlay @(isLoading ? "show" : "")  ">
    <div class="spinner-container">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>
   

<h3>List of Tasks</h3>
 <div class="filter-section ">
    <button class="btn btn-primary" @onclick="CreateNavigate"> <i class="bi bi-plus" style="margin-right:5px;"></i>Create </button>

    <SearchBox Placeholder="Search by name"filteredTasks="@filteredTasks" tasks1="tasks"  OnSearchChanged="HandleSearchChanged" />

    <FilterComponent Tasks="@tasks"
                     Users="@users"
                     FilteredTasksChanged="HandleFilteredTasksChanged" />
    </div>



 

    <Alert class="d-flex flex-row justify-content-between align-items-center" @ref="alert" Color="Color.Success" ><p>Task Deleted Successfully</p>   <CloseButton/></Alert>
    <Alert @ref="failAlert" Color="Color.Danger">Deletion failed</Alert>
   


   
    

    @* <div class="filter-section">
        <button class="btn btn-primary" @onclick="()=>CreateNavigate()">Create</button>
        <input type="text" placeholder="Search by name"  @bind="nameFilter" />
        <InputSelect class="form-control" @onselectionchange="()=>ApplyFiltersAndSort()" @bind-Value="selectedSortOption">
            <option hidden value="">Sort by</option>

            <option value="Name">Name</option>
            <option value="Type">Type</option>
            <option value="Status">Status</option>
            <!-- Add more options as needed -->
        </InputSelect>
        <button class="btn btn-outline-dark" @onclick="()=>ApplyFiltersAndSort()">Apply</button>
    </div> *@
 @if (tasks == null)
{
    <div class="spinner-wrapper">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else{
        <div style="overflow-x: auto; " class=" table-wrapper">
    <Table class="table table-striped-columns" style="min-width:max-content">
        <TableHeader >
            <TableRow TextAlignment="TextAlignment.Center">
                <TableHeaderCell  @onclick="() => SortTasksById()"> <i class="@GetSortIcon("ID")"></i>ID</TableHeaderCell>
                <TableHeaderCell  @onclick="()=>SortTasksByName()" > <i class="@GetSortIcon("Name")"></i> Name</TableHeaderCell>
                <TableHeaderCell>Type</TableHeaderCell>
                <TableHeaderCell>Description</TableHeaderCell>
                <TableHeaderCell>Reporter</TableHeaderCell>

                <TableHeaderCell>Assignee</TableHeaderCell>
                                <TableHeaderCell>Created At</TableHeaderCell>

                <TableHeaderCell> Status</TableHeaderCell>
                <TableHeaderCell @onclick="()=>SortTasksByStory()" > <i class="@GetSortIcon("Story")"></i>Story Points</TableHeaderCell>

                <TableHeaderCell>Priority</TableHeaderCell>
                <TableHeaderCell>Project</TableHeaderCell>
                <TableHeaderCell>Iteration</TableHeaderCell>
                <TableHeaderCell>Action</TableHeaderCell>

            </TableRow>
        </TableHeader>
        <TableBody>
                @foreach (var task in filteredTasks)
            {
                <TableRow class="p-2" TextAlignment="TextAlignment.Justified">
                   <TableRowCell Style="cursor:pointer"><a href="/updatetask/@task.Id">@task.Id</a></TableRowCell>
                     <TableRowCell title="@task.Title" >  <Tooltip >
                                @if(task.Title.Length>25)
                                {
                                @task.Title.Substring(0,20);
                                }
                                else{
                                @task.Title}
                         
                     
                     </Tooltip></TableRowCell>
                     <TableRowCell>@task.Type</TableRowCell>
 <TableRowCell  title="@task.Description" Class="custom-tooltip">
     @if(task.Description!=null || task.Description.Any()){
             <Tooltip>
                @if (task.Description.Length > 50)
                {
                    @task.Description.Substring(0, 20)
                }
                else
                {
                    @task.Description
                }
            </Tooltip>
     }
        </TableRowCell>                
        
        @foreach(var u in users)
                    {
                        if (task.ReporterId == u.UserId)
                        {
                            <TableRowCell >@u.UserName</TableRowCell>
                        }
                    }

                    @foreach (var u in users)
                    {
                        if (task.AssigneeId == u.UserId)
                        {
                            <TableRowCell >@u.UserName</TableRowCell>
                        }
                    }
                    <TableRowCell> @task.CreatedAt?.ToString("dd-MM-yyyy")</TableRowCell>
                  
@*                                         <TableRowCell> @string.Format("{0:yyyy-MM-dd}", task.CreatedAt) </TableRowCell>
 *@
                    @if (task.Type.ToString() == "Task")
                    {
                            @if (task.TaskStatus.ToString() == "InProgress")
                            {
                                <TableRowCell>In Progress</TableRowCell>
                            }
                            else
                            {
                                <TableRowCell >@task.TaskStatus</TableRowCell>
                            }
                        }
                    @if (task.Type.ToString() == "Bug")
                    {
                       @if (task.BugStatus.ToString() == "InProgress")
                            {
                                <TableRowCell>In Progress</TableRowCell>
                            }
                            else
                            {
                                <TableRowCell >@task.BugStatus</TableRowCell>
                            }
                    }
                    <TableRowCell >@task.StoryPoint</TableRowCell>


                        <TableRowCell>@task.Priority</TableRowCell>
                    @* <td>@task.ProjectId</td>*@
                    @foreach(var p in proj)
                    {
                        if (p.Id == task.ProjectId)
                        {
                            <TableRowCell>@p.Name</TableRowCell>
                        }
                    }
                    @foreach(var i in itrs)
                    {
                        if(i.Id==task.IterationId && i.projID == task.ProjectId)
                        {
                            <TableRowCell >@i.Name</TableRowCell>
                        }
                    }

                    <TableRowCell >

                      <a  @onclick="()=>DeleteTask(task.Id)" style="cursor:pointer"><i class="bi bi-trash"></i></a>
@* <a @onclick="()=>ShowModal()"  style="cursor:pointer"><i class="bi bi-link"></i></a>

<Modal @ref="isModalVisible" @onclose="HideModal">
        <!-- Your predefined content here -->
        @* <Field>
               <LinkPage fromId="@task.Id"></LinkPage>
               </Field> 
                <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder="Enter name..." />
            </Field>
            <Field>
                <FieldLabel>Surname</FieldLabel>
                <TextEdit Placeholder="Enter surname..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@HideModal">Save Changes</Button>
        </ModalFooter>
    </ModalContent>

        <!-- Add more content as needed -->

</Modal> *@


@*                     <a @onclick="()=>LinkTask(task.Id)" style="cursor:pointer"><i class=" bi bi-link"></i></a>
 *@
                       @*  <a  @onclick="()=>UpdateTask(task.Id)"><i class="bi p-2 bi-pencil"></i></a>
                        <a @onclick="()=>Attach(task.Id)"><i class=" bi bi-upload"></i></a>
 *@
                  </TableRowCell>
                    

                </TableRow>
            }
        </TableBody>
    </Table>

    </div>
    }
    <style>
        .custom-tooltip .tooltip-inner {
    background-color: white;
    color: black; /* Change text color to ensure it's visible on a white background */
    border: 1px solid #ddd; /* Optional: add a border */
}

.custom-tooltip .tooltip-arrow {
    color: white; /* Change arrow color to match the tooltip background */
}
 .spinner-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100px;
        margin: 20px;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.4em;
    }

    TableRowCell{
        align-items:left;
    }

    </style>
  
    

@code {
    private List<TaskDTO> tasks;
    private ProjectDTO[] proj;
    private UserDTO[] users;
    /// <summary>
    ///private AlertMessage Alert;
    /// </summary>
    // public List<TaskDTO> GridData { get; set; }
    private IterationDTO[] itrs;
    Alert alert;
    private bool isLoading = false;
    Alert failAlert;
    private string nameFilter = string.Empty;
    private ElementReference searchInput;

    private List<TaskDTO> filteredTasks ;
    private string selectedSortOption = "Name";
    private string sortColumn = "Name";
    private bool sortAscending = true;

    private Modal isModalVisible;
    private void HandleFilteredTasksChanged(List<TaskDTO> filtered)
    {
        filteredTasks = filtered;
    }

    private Task ShowModal()
    {
        return isModalVisible.Show();
    }
    private Task HideModal()
    {
        return isModalVisible.Hide();
    }

    private async Task OnIsVisibleChanged(bool visible)
    {
        isModalVisible.Show();
        await Task.CompletedTask; // Ensure async signature matches if needed
    }

    private void SortTasksById()
    {
        SortTasks("ID");
    }

    private void SortTasksByName()
    {
        SortTasks("Name");
    }

    private void SortTasksByStory()
    {
        SortTasks("Story");
    }
    private void SortTasks(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }


        switch (sortColumn)
        {
            case "Name":
                filteredTasks = sortAscending? filteredTasks.OrderBy(t => t.Title).ToList():filteredTasks.OrderByDescending(t => t.Title).ToList();
                break;
            case "Type":
                filteredTasks = sortAscending? filteredTasks.OrderBy(t => t.Type).ToList():filteredTasks.OrderByDescending(t => t.Type).ToList();
                break;
            case "ID":
                filteredTasks = sortAscending? filteredTasks.OrderBy(t => t.CreatedAt).ToList():filteredTasks.OrderByDescending(t => t.CreatedAt).ToList();
                break;
            case "Story":
                filteredTasks = sortAscending? filteredTasks.OrderBy(t => t.StoryPoint).ToList():filteredTasks.OrderByDescending(t => t.StoryPoint).ToList();
                break;
                // Add more cases as needed

        }
        StateHasChanged();


    }

    private object GetPropertyValue(TaskDTO task, string column)
    {
        // Use reflection to get the property value based on column name
        var property = typeof(TaskDTO).GetProperty(column);
        return property?.GetValue(task);
    }

    private string GetSortIcon(string column)
    {
        if (sortColumn == column)
        {
            return sortAscending ? "bi bi-arrow-up" : "bi bi-arrow-down";
        }
        else
        {
            return "bi bi-arrow-down-up";
        }
    }

    private async Task DeleteTask(string id)
    {
        isLoading = true;
        var res=  await taskService.DeleteTaskApi(id);
        if (res)
        {
            alert.Show();
            await Task.Delay(2000);

            await Reload();
            isLoading = false;

        }
        else
        {
            failAlert.Show();
            await Task.Delay(2000);

            await Reload();
        }


    }

    private async Task UpdateTask(string id)
    {
        Navigation.NavigateTo($"/updatetask/{id}");

    }
    private async Task LinkTask(string id)
    {
        Navigation.NavigateTo($"/LinkTask/{id}");
    }
    private async Task Attach(string id)
    {
        Navigation.NavigateTo($"/upload/{id}");
    }

    private async Task CreateNavigate()
    {
        Navigation.NavigateTo("/CreateTask");
    }
    private async Task Reload()
    {
        tasks = (await taskService.GetTasksAsync()).ToList();
        filteredTasks=tasks.ToList();
        StateHasChanged();

    }
    private void HandleSearchChanged(List<TaskDTO> taskss)
    {
        filteredTasks = taskss;
        
    }

 

    private void ApplyFiltersAndSort()
    {

        filteredTasks = tasks.ToList() ?? new List<TaskDTO>();

        // Apply filters
        if (!string.IsNullOrWhiteSpace(nameFilter))
        {
            filteredTasks = filteredTasks
                .Where(t => t.Title.Contains(nameFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Force re-rendering the component after applying filters
        StateHasChanged();
    }

    private  void ApplyFiltersAndSort1(ChangeEventArgs e)
    {
        selectedSortOption = e.Value.ToString();
        //nameFilter = searchInput.Value; 
        filteredTasks = tasks.ToList() ?? new List<TaskDTO>();

      

        // Apply sorting
        switch (selectedSortOption)
        {
            case "Name":
                filteredTasks = filteredTasks.OrderBy(t => t.Title).ToList();
                break;
            case "Type":
                filteredTasks = filteredTasks.OrderBy(t => t.Type).ToList();
                break;
            case "Status":
                filteredTasks = filteredTasks.OrderBy(t => t.TaskStatus).ToList();
                break;
                // Add more cases as needed
           
        }
         StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {

        try
        {
            if(taskService==null){
                Console.WriteLine("Tasks service is null");
                return;
            }
            var tasksList = (await taskService.GetTasksAsync());

            Console.WriteLine(tasksList);
            if(tasksList!=null){
                tasks = tasksList.ToList();
                proj = (await taskService.GetAllProjectsAsync()).ToArray();
                itrs = (await taskService.GetAllIterations()).ToArray();
                users = (await userService.GetAllUsersAsync()).ToArray();
                
             //   ApplyFiltersAndSort();

            }
            else{
                Console.WriteLine("Tasks service returned null");

            }
        }
        catch(Exception ex){
            Console.WriteLine(ex.Message);
            throw;
        }

        //GridData = tasks;
    }
}

