@page "/dragdrop"

<DropContainer TItem="TaskItem" Items="@Tasks" ItemsFilter="@((task, dropZone) => task.Status == dropZone)" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
    <ChildContent>
        <DropZone TItem="TaskItem" Name="ToDo" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">To Do</Heading>
        </DropZone>
        <DropZone TItem="TaskItem" Name="InProgress" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">In Progress</Heading>
        </DropZone>
        <DropZone TItem="TaskItem" Name="Done" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Done</Heading>
        </DropZone>
    </ChildContent>
    <ItemTemplate>
        <Card Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
            <CardBody>
                <Text>@context.Title</Text>
                    <Text>@context.Description</Text>
                    <Text>@context.AssignedTo</Text>
                </CardBody>
            </Card>
        </ItemTemplate>
    </DropContainer>

    @code {
    public class TaskItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string AssignedTo { get; set; }
        public string Status { get; set; }
    }

    private List<TaskItem> Tasks = new()
    {
        new TaskItem() { Title = "Task 1", Description = "Description for Task 1", AssignedTo = "John Doe", Status = "ToDo" },
        new TaskItem() { Title = "Task 2", Description = "Description for Task 2", AssignedTo = "Jane Smith", Status = "ToDo" },
        new TaskItem() { Title = "Task 3", Description = "Description for Task 3", AssignedTo = "Michael Brown", Status = "InProgress" },
        new TaskItem() { Title = "Task 4", Description = "Description for Task 4", AssignedTo = "Emily Johnson", Status = "Done" },
    };

    private Task ItemDropped(DraggableDroppedEventArgs<TaskItem> dropItem)
    {
        dropItem.Item.Status = dropItem.DropZoneName;
        return Task.CompletedTask;
    }
}

































@* @page "/drag"
@inject IJSRuntime JS
@using System.Collections.Generic
@using System.Linq


<div class="container">
    <div class="status-column" @ref="toDoColumn" data-status="ToDo"
         @onmousemove="@(e => OnMouseMove(e, "ToDo"))"
         @ondrop="@(e => OnDrop(e, "ToDo"))"
         @ondragover="OnDragOver">
        <h3>To Do</h3>
        @foreach (var task in Tasks.Where(t => t.Status == "ToDo"))
        {
            <div class="task" draggable="true" @ondragstart="@(e => OnDragStart(e, task))">
                @task.Title
            </div>
        }
    </div>
    <div class="status-column" @ref="inProgressColumn" data-status="InProgress"
         @onmousemove="@(e => OnMouseMove(e, "InProgress"))"
         @ondrop="@(e => OnDrop(e, "InProgress"))"
         @ondragover="OnDragOver">
        <h3>In Progress</h3>
        @foreach (var task in Tasks.Where(t => t.Status == "InProgress"))
        {
            <div class="task" draggable="true" @ondragstart="@(e => OnDragStart(e, task))">
                @task.Title
            </div>
        }
    </div>
    <div class="status-column" @ref="doneColumn" data-status="Done"
         @onmousemove="@(e => OnMouseMove(e, "Done"))"
         @ondrop="@(e => OnDrop(e, "Done"))"
         @ondragover="OnDragOver">
        <h3>Done</h3>
        @foreach (var task in Tasks.Where(t => t.Status == "Done"))
        {
            <div class="task" draggable="true" @ondragstart="@(e => OnDragStart(e, task))">
                @task.Title
            </div>
        }
    </div>
</div>

@code {
    private List<TaskItem> Tasks = new List<TaskItem>
    {
        new TaskItem { Id = 1, Title = "Task 1", Status = "ToDo" },
        new TaskItem { Id = 2, Title = "Task 2", Status = "ToDo" },
        new TaskItem { Id = 3, Title = "Task 3", Status = "InProgress" },
        new TaskItem { Id = 4, Title = "Task 4", Status = "Done" }
    };

    private TaskItem draggedTask;
    private string dropTargetStatus;

    private ElementReference toDoColumn;
    private ElementReference inProgressColumn;
    private ElementReference doneColumn;

    private void OnDragStart(DragEventArgs e, TaskItem task)
    {
        Console.WriteLine("OnDragStart: " + task.Title);
        draggedTask = task;
    }

    private void OnMouseMove(MouseEventArgs e, string status)
    {
        dropTargetStatus = status;
    }

    private async void OnDrop(DragEventArgs e, string status)
    {
        await JS.InvokeVoidAsync("dragDropHelper.preventDefault");
        Console.WriteLine("OnDrop: " + status);
        if (draggedTask != null && dropTargetStatus == status)
        {
            draggedTask.Status = status;
            draggedTask = null;
            dropTargetStatus = null;
            StateHasChanged(); // Trigger re-render to update the UI
        }
    }
    public class TaskItem
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Status { get; set; }
    }

    private async void OnDragOver(DragEventArgs e)
    {
        await JS.InvokeVoidAsync("dragDropHelper.preventDefault");
        Console.WriteLine("OnDragOver");
    }
} *@
@* @code {
    private List<TaskItem> Tasks = new List<TaskItem>
    {
        new TaskItem { Id = 1, Title = "Task 1", Status = "ToDo" },
        new TaskItem { Id = 2, Title = "Task 2", Status = "ToDo" },
        new TaskItem { Id = 3, Title = "Task 3", Status = "InProgress" },
        new TaskItem { Id = 4, Title = "Task 4", Status = "Done" }
    };

    private ElementReference toDoColumn;
    private ElementReference inProgressColumn;
    private ElementReference doneColumn;

    private TaskItem draggedTask;
    public class TaskItem
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Status { get; set; }
    }

    private async void OnDragStart(DragEventArgs e, TaskItem task)
    {
        draggedTask = task;
    }

    private async void OnDrop(DragEventArgs e)
    {
        await JS.InvokeVoidAsync("dragDropHelper.preventDefault");
        string status = string.Empty;

        // Check the target and get the status
        if (e.Target.Equals(toDoColumn))
        {
            status = "ToDo";
        }
        else if (e.Target.Equals(inProgressColumn))
        {
            status = "InProgress";
        }
        else if (e.Target.Equals(doneColumn))
        {
            status = "Done";
        }

        Console.WriteLine("OnDrop: " + status);
        if (draggedTask != null && !string.IsNullOrEmpty(status))
        {
            draggedTask.Status = status;
            draggedTask = null;
            StateHasChanged(); // Trigger re-render to update the UI
        }
    }

    private async void OnDragOver(DragEventArgs e)
    {
await JS.InvokeVoidAsync("dragDropHelper.preventDefault");    }
} *@
<style>

    .container {
        display: flex;
        justify-content: space-around;
        padding: 20px;
    }

    .status-column {
        width: 30%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .task {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        background-color: #fff;
        cursor: grab;
    }

        .task:active {
            cursor: grabbing;
        }

</style>
<script>
    function setDragData(event, data) {
        event.dataTransfer.setData('text', data);
    }
    function GetData(event,data){
        event.dataTransfer.getData("text/plain");
    }
    window.dragDropHelper = {
        preventDefault: function (event) {
            if (event) {
                event.preventDefault();
            }
            return false; // Prevent default behavior for drag over
        }
    };


</script>
