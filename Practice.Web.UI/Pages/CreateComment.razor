@page "/Comment"
@inject CommentAPIService CmtApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject UserAPIService UserService
@inject FileApiService fileUpload

<div class="m-3" style="margin-bottom:10px;">
<div class=" " @onclick="LoadComments">
        <div class=" p-1" style="border:2px; border-color:ActiveBorder" >
            <div class="accordion-header d-flex justify-content-between align-items-center text-muted" style="cursor:pointer; " @onclick="ToggleAccordion">
                <span class="@(isAccordionOpen ? "hidden" : "show")" style="margin:10px; display:@(isAccordionOpen ?"none" : "block") ">Add Comment <i style="margin-left:4px;" class="bi bi-pencil"></i></span>
                @if (isAccordionOpen)
                {
                   // <i class="bi bi-caret-down-fill"></i>
                }
                else
                {
                    <i class="bi bi-caret-right-fill"></i>
                }
        </div>
        @if (isAccordionOpen)
        {
            <div class="">
                <div class="comment-section">
                    
                    <textarea class="form-control " @bind="Cont" style="height: 150px;" placeholder="Enter your comment..."></textarea>
                    <div class="d-flex flex-row-reverse bd-highlight p-2" style="padding:5px">

                        <button class="btn btn-primary me-1 p-2 bd-highlight" @onclick="HandleValidSubmit">Save</button>&nbsp
                        <button class="btn btn-secondary p-2 bd-highlight" @onclick="CancelComment">Cancel</button>
                       
                          

                    </div>
                </div>
            </div>
        }
       
        
        
    </div>
</div>


    <div class="comments-list m-2" style="margin-bottom:15px;">

        @if (Comments.Count > 0)
        {
            @foreach (CommentDTO comment in Comments)
            {

                Username = GetUsername(comment);
                <CommentBox Id="@comment.CommentId"
                Username="@Username"
                UserId="@UserId"
                Content="@comment.Content"
                TaskId="@TaskId"
                Comments="@Comments"
                OnCommentChange="@LoadComments"
                CreatedAt="@comment.CreatedAt" />
            }

        }
        else
        {
            <p class="text-muted" style=" text-align:center;">No comments</p>
        }

    </div>

</div>
<style>
   
</style>

@code {
    /// <summary>
    ///  [Parameter]
    /// </summary>
    // public int TaskId { get; set; }
    [Parameter]
    public string TaskId { get; set; }
    [Parameter]
    public int UserId{ get; set; }
    public string Cont;
    Alert flag;
    private CommentDTO comment1;
    // private IEnumerable<CommentDTO> Comments;
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private string statusMessage = "";
    private bool isUploading = false;

    public string Username { get; set; }
    List<UserDTO> Users = new List<UserDTO>();
    List<CommentDTO> Comments = new List<CommentDTO>();

    protected override async void OnInitialized()
    {
        //comment.TaskId = TaskId;
        Comments = (await CmtApiService.GetCommentsAsyncByTID(TaskId)).ToList();
      
        Users = (await UserService.GetAllUsersAsync()).ToList();
        await LoadComments();


    }

    
    private async Task LoadComments()
    {
        Comments = (await CmtApiService.GetCommentsAsyncByTID(TaskId)).OrderByDescending(c => c.CreatedAt)
            .ToList();
           // ToggleAccordion();
        // Comments.Reverse();
        StateHasChanged();
    }
    public  string GetUsername(CommentDTO comment)
    {
        foreach (var u in Users)
        {
            if (comment.UserId == u.UserId && comment.TaskId == TaskId)
            {
                Username = u.UserName;
            }
        }
        return Username;

    }
    private async Task HandleValidSubmit()
    {
        comment1 = new CommentDTO
            {
                Content = Cont,
                TaskId = TaskId,
                UserId = UserId,
                CreatedAt = DateTime.Now
    };
       // await flag.Show();
        var cmt =await CmtApiService.CreateComment(comment1);
        
        Cont = string.Empty;
      //  await Task.Delay(2000);
       // await flag.Toggle();
        await LoadComments();
        StateHasChanged();
        // Reload();

    }
   
   
    private bool isAccordionOpen = false;
    // private string Comment { get; set; } = string.Empty;
   
    private void ToggleAccordion()
    {
        isAccordionOpen = !isAccordionOpen;
    }

  
    private void CancelComment()
    {
        // Clear the comment
        Cont = "";
        ToggleAccordion();
    }
}