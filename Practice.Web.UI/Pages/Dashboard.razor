@page "/dashboard"
@using DemoJira.Bussiness.APIServices
@inject TaskAPIService TaskService1
@inject UserAPIService UserService1
@inject NavigationManager Navigation

@using System.Collections.ObjectModel
@using Blazorise.Bootstrap5
@using Blazorise.Components


<div class="overlay @(isLoading ? "show" : "")  ">
    <div class="spinner-container">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>


<div class="d-flex flex-row p-3 filter-section" style="padding:6px;">

    <SearchBox Placeholder="Search by name" filteredTasks="@filteredTasks" tasks1="@tasks1" OnSearchChanged="HandleSearchChanged" />
    <FilterComponent Tasks="@tasks1"
                     Users="@Users"
                     FilteredTasksChanged="HandleSearchChanged" />



</div>


<DropContainer @ref="drop" TItem="TaskDTO" Items="@filteredTasks" ItemsFilter="@((item, dropZone) => {
        var status = GetTaskStatus(item);
      //  Console.WriteLine($"Filtering: Item status = {status}, DropZone = {dropZone}");
        return status == dropZone;
    })" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
    <ChildContent>
        @foreach (string s in new[] { "New", "InProgress", "Closed" })
        {
            string dropzone = s;

            <DropZone TItem="TaskDTO" Style="max-width:30%; text-align:center;" Name="@dropzone" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom" Padding="Padding.Is3" Style="font-family:'Times New Roman', Times, serif;  border-radius: 5px;" Class="@GetDropZoneClass(dropzone)"> @(s.Equals("InProgress") ? "In Progress" : s)</Heading>
                    @foreach (var task in filteredTasks)
                {
                    if (GetTaskStatus(task) == dropzone)
                    {
                        <_Draggable TItem="TaskDTO" Item="@task">
                        <Card  Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
                                <CardBody style="text-align:left">
                                    <div class="d-flex flex-row">
                                <div class="d-flex flex-column">
                                    <h5 class="card-title "  style="cursor:pointer; " >
                                        <a href="/updatetask/@task.Id">@task.Id</a>
                                        <small class="">(@task.Title )</small>
                                    </h5>
                                    <Tooltip >
                                        @if (task.Description.Length > 50)
                                        {
                                           <p> @task.Description.Substring(0, 50)</p>
                                        }
                                        else
                                        {
                                                <p> @task.Description</p>
                                        }
                                    </Tooltip>
                                    </div>
                                   
                                    </div>
                                    <Divider></Divider>
                                    <div class="d-flex flex-row justify-content-between align-items-center">
                                        @foreach (var u in Users)
                                        {
                                            if (task.AssigneeId == u.UserId)
                                            {
                                                <div class="d-flex flex-column ms-2">
                                                    <p class="text-muted mb-0" style="font-size:13px">Assigned to:</p>
                                                    <p class="card-text" style="margin-top:0;">@u.UserName</p>
                                                </div>
                                            }
                                        }
                                        <p class="card-text"><small class="text-muted">@task.StartDate.ToString("g")</small></p>
                                       
                                    </div>

                            </CardBody>
                        </Card>
                        </_Draggable>
                    }
                }
                </DropZone>
        }
    </ChildContent>
    
</DropContainer>



@code {
    private string nameFilter = string.Empty;

    //private List<TaskDTO> tasks1 = new List<TaskDTO>();
    //private List<TaskDTO> filteredTasks = new List<TaskDTO>();
    private List<TaskDTO> tasks1 = new List<TaskDTO>();
    private List<TaskDTO> filteredTasks = new List<TaskDTO>();
    private List<UserDTO> Users = new List<UserDTO>();
    private List<string> selectedFilterValues = new List<string>();
    private List<string> selectedUserValues = new List<string>();

    private  DropContainer<TaskDTO> drop;
    private UserDTO selectedUser;
    private string filterType = "All";
    private bool isLoading = true;
    private string highlightClass;

    private void HandleSearchChanged(List<TaskDTO> args)
    {
        filteredTasks = args;
        drop.Refresh();
    }



    private void ApplyHighlight()
    {
        highlightClass = "highlight";
    }

    private void RemoveHighlight()
    {
        highlightClass = string.Empty;
    }
    private bool IsTypeSelected(string type)
    {
        return selectedFilterValues.Contains(type);
    }

    private bool IsUserSelected(string userId)
    {
        return selectedUserValues.Contains(userId);
    }

    private void OnFilterUserCheckboxChanged(string userId, bool isChecked)
    {
        if (isChecked)
        {
            if (!selectedUserValues.Contains(userId))
            {
                selectedUserValues.Add(userId);
            }
        }
        else
        {
            selectedUserValues.Remove(userId);
        }
        ApplyFilters2();
    }
    private async Task UpdateTask(string id)
    {
        Navigation.NavigateTo($"/updatetask/{id}");

    }
  
    private void ApplyFilters2()
    {
        if (selectedUserValues.Any())
        {
            filteredTasks = new List<TaskDTO>(tasks1.Where(t => selectedUserValues.Contains(t.AssigneeId.ToString())));
        }
        else
        {
            filteredTasks = new List<TaskDTO>(tasks1);
        }
        drop.Refresh(); // Assuming drop is an instance of some component needing refresh
        InvokeAsync(StateHasChanged);
    }


    private void OnFilterCheckboxChanged(string filter, bool isChecked)
    {
        if (isChecked)
        {
            if (!selectedFilterValues.Contains(filter))
            {
                selectedFilterValues.Add(filter);
            }
        }
        else
        {
            selectedFilterValues.Remove(filter);
        }
        ApplyFilters();
    }

    private void SelectUser(UserDTO user)
    {
        selectedUser = user;
        ApplyFilters2();
    }
    protected override async Task OnInitializedAsync()
    {
        var task1 = await TaskService1.GetTasksAsync();

        tasks1 = new List<TaskDTO>(task1);
        var userss = await UserService1.GetAllUsersAsync();
        Users = userss.ToList();
        filteredTasks = tasks1;
        isLoading = false;
        //ApplyFilters();

    }

    private string GetDropZoneClass(string dropZone)
    {
        return dropZone switch
        {
            "New" => "dropzone-new",
            "InProgress" => "dropzone-in-progress",
            "Closed" => "dropzone-closed",
            _ => "dropzone-default"
        };
    }
 
    private void ApplyFilters()
    {
        // filterType = e.Value?.ToString() ?? string.Empty;

        if (selectedFilterValues.Count==0)
        {
            filteredTasks = tasks1;

        }
      
        else
        {
            filteredTasks = new List<TaskDTO>(tasks1.Where(t => selectedFilterValues.Contains(t.Type.ToString())));
        }
        filteredTasks = new List<TaskDTO>(filteredTasks);
        drop.Refresh();
        InvokeAsync(StateHasChanged);

        //StateHasChanged();
    }

  
    private async Task ItemDropped(DraggableDroppedEventArgs<TaskDTO> dropItem)
    {
        try
        {
            if (dropItem.Item.TaskStatus.HasValue)
            {
                dropItem.Item.TaskStatus = Enum.Parse<MyTaskStatus>(dropItem.DropZoneName);
            }
            dropItem.Item.BugStatus = Enum.Parse<BugStatus>(dropItem.DropZoneName);

            Console.WriteLine($"Task dropped: ID = {dropItem.Item.Id}, New Status = {dropItem.DropZoneName}");
            bool response = await TaskService1.UpdateTask(dropItem.Item.Id, dropItem.Item);
            if (response)
            {
                Console.WriteLine($"Task ID {dropItem.Item.Id} successfully updated.");
            }
            else
            {
                Console.WriteLine($"Failed to update task ID {dropItem.Item.Id}. Status Code: {response}");
                // Handle failed update (e.g., revert status change)
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred while updating task ID {dropItem.Item.Id}: {ex.Message}");
            // Handle exception (e.g., revert status change)
        }
    }

    public string GetTaskStatus(TaskDTO task)
    {
        // Console.WriteLine($"GetTaskStatus called for Task ID: {task.Id}, Status: {task.TaskStatus}");

        if (task.TaskStatus.HasValue)
        {
            return task.TaskStatus switch
            {
                MyTaskStatus.New => "New",
                MyTaskStatus.InProgress => "InProgress",
                MyTaskStatus.Closed => "Closed",
                MyTaskStatus.Review => "Review", // Handle 'Review' case
                _ => "Unknown Task Status"       // Default case for unmatched values
            };
        }
        else if (task.BugStatus.HasValue)
        {
            return task.BugStatus switch
            {
                BugStatus.New => "New",
                BugStatus.InProgress => "InProgress",
                BugStatus.Closed => "Closed",
                BugStatus.Review => "Review",    // Handle 'Review' case in BugStatus
                _ => "Unknown Bug Status"        // Default case for unmatched values
            };
        }
        return "Status not available";
    }

}