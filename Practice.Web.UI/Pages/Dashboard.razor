@page "/dashboard"
@using DemoJira.Bussiness.APIServices
@inject TaskAPIService TaskService

<DropContainer TItem="TaskDTO" Items="@tasks1" ItemsFilter="@((item, dropZone) => {
        var status = GetTaskStatus(item);
      //  Console.WriteLine($"Filtering: Item status = {status}, DropZone = {dropZone}");
        return status == dropZone;
    })" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
    <ChildContent>
        @foreach (string s in new[] { "New", "InProgress", "Closed" })
        {
        string dropzone = s;

            <DropZone  TItem="TaskDTO" Name="@dropzone" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom" Padding="Padding.Is3" Style="font-family:'Times New Roman', Times, serif;" Class="@GetDropZoneClass(dropzone)"> @dropzone</Heading>
                    @foreach (var task in tasks1)
                {
                    if (GetTaskStatus(task) == dropzone)
                    {
                        <_Draggable TItem="TaskDTO" Item="@task">
                        <Card Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
                            <CardBody>
                                    <h5 class="card-title">@task.Title</h5>
                                    <p class="card-text">@task.Description</p>
                                    <p class="card-text"><small class="text-muted">@task.StartDate.ToString("g")</small></p>
                            </CardBody>
                        </Card>
                        </_Draggable>
                    }
                }
                </DropZone>
        }
    </ChildContent>
    
</DropContainer>

<style>
    .dropzone-new {
        background-color:dodgerblue ; /* Llueight green */
    }

    .dropzone-in-progress {
        background-color: orange; /* Light yellow */
    }

    .dropzone-closed {
        background-color: green; /* Light red */
    }

    .dropzone-default {
        background-color: #ffffff; /* Default white */
    }
    .heading{
        font-family:'Times New Roman', Times, serif;
    }

</style>

@code {

    private List<TaskDTO> tasks1 = new List<TaskDTO>();

    protected override async Task OnInitializedAsync()
    {
        var task1 = await TaskService.GetTasksAsync();
        tasks1 = task1.ToList();
    }

    private string GetDropZoneClass(string dropZone)
    {
        return dropZone switch
        {
            "New" => "dropzone-new",
            "InProgress" => "dropzone-in-progress",
            "Closed" => "dropzone-closed",
            _ => "dropzone-default"
        };
    }
    private async Task ItemDropped(DraggableDroppedEventArgs<TaskDTO> dropItem)
    {
        try
        {
            if (dropItem.Item.TaskStatus.HasValue)
            {
                dropItem.Item.TaskStatus = Enum.Parse<MyTaskStatus>(dropItem.DropZoneName);
            }
            dropItem.Item.BugStatus = Enum.Parse<BugStatus>(dropItem.DropZoneName);

            Console.WriteLine($"Task dropped: ID = {dropItem.Item.Id}, New Status = {dropItem.DropZoneName}");
            bool response = await TaskService.UpdateTask(dropItem.Item.Id, dropItem.Item);
            if (response)
            {
                Console.WriteLine($"Task ID {dropItem.Item.Id} successfully updated.");
            }
            else
            {
                Console.WriteLine($"Failed to update task ID {dropItem.Item.Id}. Status Code: {response}");
                // Handle failed update (e.g., revert status change)
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred while updating task ID {dropItem.Item.Id}: {ex.Message}");
            // Handle exception (e.g., revert status change)
        }
    }

    private string GetTaskStatus(TaskDTO task)
    {
        // Console.WriteLine($"GetTaskStatus called for Task ID: {task.Id}, Status: {task.TaskStatus}");

        if (task.TaskStatus.HasValue)
        {
            return task.TaskStatus switch
            {
                MyTaskStatus.New => "New",
                MyTaskStatus.InProgress => "InProgress",
                MyTaskStatus.Closed => "Closed",
                _ => throw new NotImplementedException(),
            };
        }
        else if (task.BugStatus.HasValue)
        {
            return task.BugStatus switch
            {
                BugStatus.New => "New",
                BugStatus.InProgress => "InProgress",
                BugStatus.Closed => "Closed",
                _ => throw new NotImplementedException(),
            };
        }
        return null;
    }
}